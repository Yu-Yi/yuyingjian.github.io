I"OX<ul id="markdown-toc">
  <li><a href="#1-数组操作" id="markdown-toc-1-数组操作">1. 数组操作</a>    <ul>
      <li><a href="#11-数组元素的最大最小值" id="markdown-toc-11-数组元素的最大最小值">1.1. 数组元素的最大最小值</a>        <ul>
          <li><a href="#111-使用apply" id="markdown-toc-111-使用apply">1.1.1. 使用apply</a></li>
          <li><a href="#112-es6的操作符" id="markdown-toc-112-es6的操作符">1.1.2. es6的…操作符</a></li>
          <li><a href="#113-arrayreduce" id="markdown-toc-113-arrayreduce">1.1.3. Array.reduce()</a></li>
          <li><a href="#114-排序" id="markdown-toc-114-排序">1.1.4. 排序</a></li>
        </ul>
      </li>
      <li><a href="#12-数组的拷贝" id="markdown-toc-12-数组的拷贝">1.2. 数组的拷贝</a>        <ul>
          <li><a href="#121-concat-的实现" id="markdown-toc-121-concat-的实现">1.2.1. concat() 的实现</a></li>
          <li><a href="#122-spread-元素符的实现" id="markdown-toc-122-spread-元素符的实现">1.2.2. spread 元素符的实现</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#2-对象操作" id="markdown-toc-2-对象操作">2. 对象操作</a>    <ul>
      <li><a href="#21-对象的深拷贝" id="markdown-toc-21-对象的深拷贝">2.1. 对象的深拷贝</a>        <ul>
          <li><a href="#211-underscorejs-的实现" id="markdown-toc-211-underscorejs-的实现">2.1.1. Underscore.js 的实现</a></li>
          <li><a href="#212-利用-json-的解析和序列化" id="markdown-toc-212-利用-json-的解析和序列化">2.1.2. 利用 JSON 的解析和序列化</a></li>
          <li><a href="#第三方库的实现" id="markdown-toc-第三方库的实现">第三方库的实现</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#2-date-对象相关的操作" id="markdown-toc-2-date-对象相关的操作">2. Date 对象相关的操作</a>    <ul>
      <li><a href="#21-某个日期的前后多少日" id="markdown-toc-21-某个日期的前后多少日">2.1. 某个日期的前/后多少日</a></li>
    </ul>
  </li>
</ul>

<p>做好基本总结，对于每一个程序员来讲都是重要的。最近看到一篇文章，文中说。</p>

<blockquote>
  <p>前端工程师要忘记前端二字。</p>
</blockquote>

<p>我深为折服，也颇为赞同。程序员所面临的无非是一个个问题，所做的也是解决一个一个难题。所谓语言、框架、工具、策略都是为了解决问题而服务的。很多人觉得JavaScript只能做一些写写脚本这一类前端的事，如果单纯这样去考虑，眼光未免太狭隘了。<strong>JavaScript大有所为</strong>，只有你想不到的，没有你做不到的，只有开拓语言的新应用范围，才能做到<strong>创造力</strong>，而不是单纯的紧跟时代所趋或追求于所谓的再创造力。</p>

<p>周杰伦有一次接受采访，说，我从不关心流行，我创造流行(有待考据)。盲目去追求时代热潮也是不可取的，但这并不意味你要固步自封。良好的知识储备是必要的，是一切发展的基石。所以，不要看我们是前端程序员，算法、数据库、编译原理、操作系统等都应该具备。</p>

<p>所以，勉励自己。</p>

<!-- more -->
<!-- TOC -->

<ul>
  <li><a href="#1-数组操作">1. 数组操作</a>
    <ul>
      <li><a href="#11-数组元素的最大最小值">1.1. 数组元素的最大最小值</a>
        <ul>
          <li><a href="#111-使用apply">1.1.1. 使用apply</a></li>
          <li><a href="#112-es6的操作符">1.1.2. es6的…操作符</a></li>
          <li><a href="#113-arrayreduce">1.1.3. Array.reduce()</a></li>
          <li><a href="#114-排序">1.1.4. 排序</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#2-对象操作">2. 对象操作</a>
    <ul>
      <li><a href="#21-对象的深拷贝">2.1. 对象的深拷贝</a>
        <ul>
          <li><a href="#211-underscorejs-的实现">2.1.1. Underscore.js 的实现</a></li>
          <li><a href="#212-利用-json-的解析和序列化">2.1.2. 利用 JSON 的解析和序列化</a></li>
          <li><a href="#第三方库的实现">第三方库的实现</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h1 id="1-数组操作">1. 数组操作</h1>

<h2 id="11-数组元素的最大最小值">1.1. 数组元素的最大最小值</h2>

<p>我们知道对象<code class="language-plaintext highlighter-rouge">Math</code>有两个最大值最小值方法<code class="language-plaintext highlighter-rouge">Math.max()</code>和<code class="language-plaintext highlighter-rouge">Math.min()</code>，接受一系列数字，返回给定数字的最大值最小值。</p>

<pre><code class="language-Syntax">Math.max([value1[, value2[, ...]]])
</code></pre>

<p>但是需要注意的几点是:</p>

<ul>
  <li>不接收数组参数</li>
  <li>对于非<code class="language-plaintext highlighter-rouge">Number</code>类型，会进行隐式类型转换。如果其中某个参数不能转换成数字，返回<code class="language-plaintext highlighter-rouge">NaN</code></li>
  <li>没有给定参数，返回<code class="language-plaintext highlighter-rouge">-Infinity</code>(对Math.max()而言，Math.min()则返回<code class="language-plaintext highlighter-rouge">Infinity</code>)</li>
</ul>

<p>所以我们采用<code class="language-plaintext highlighter-rouge">Math.max()</code>的思路(以Math.max()为例)，关键变成如何对数组进行处理。</p>

<h3 id="111-使用apply">1.1.1. 使用apply</h3>

<p>我们知道，<code class="language-plaintext highlighter-rouge">apply()</code>接收一个数组参数。</p>

<pre><code class="language-Syntax">theFunction.apply(valueForThis, arrayOfArgs)
</code></pre>

<p><code class="language-plaintext highlighter-rouge">apply()</code>会unwrap参数的第一层<code class="language-plaintext highlighter-rouge">[]</code>(?why)。</p>

<p>所以方法如下:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">23</span><span class="p">];</span>
<span class="kd">function</span> <span class="nx">getMaxOfArray</span><span class="p">(</span><span class="nx">numArray</span><span class="p">){</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">numArray</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">getMaxOfArray</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="c1">// 23</span>
</code></pre></div></div>

<h3 id="112-es6的操作符">1.1.2. es6的…操作符</h3>

<p>ES6新增一个<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">spread operator</a>，可以展开数组元素。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">23</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">arr</span><span class="p">);</span> <span class="c1">// 23</span>
</code></pre></div></div>

<h3 id="113-arrayreduce">1.1.3. Array.reduce()</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">23</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">));</span> <span class="c1">//23</span>
</code></pre></div></div>

<h3 id="114-排序">1.1.4. 排序</h3>

<p>这种是最容易想到的方式了，对数组元素进行排序，最大最小的分别在数组两端。排序，我们可以用<code class="language-plaintext highlighter-rouge">Array.prototype.sort()</code>方法。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">23</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span> <span class="c1">//23</span>
</code></pre></div></div>

<blockquote>
  <p>参考: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max">Math.max()</a></p>
</blockquote>

<h2 id="12-数组的拷贝">1.2. 数组的拷贝</h2>

<h3 id="121-concat-的实现">1.2.1. concat() 的实现</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">colors</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">cloneColors</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">.</span><span class="nx">concat</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="122-spread-元素符的实现">1.2.2. spread 元素符的实现</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">colors</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">]</span>
<span class="kd">let</span> <span class="p">[...</span><span class="nx">clonedColors</span><span class="p">]</span> <span class="o">=</span> <span class="nx">colors</span>
</code></pre></div></div>

<hr />

<h1 id="2-对象操作">2. 对象操作</h1>

<h2 id="21-对象的深拷贝">2.1. 对象的深拷贝</h2>

<p>由于 Object 是引用类型，所以对对象的简单拷贝是引用拷贝，也就是浅拷贝。所谓深拷贝，指的就是我们将对象所在的内存空间的内容重新拷贝了一份。</p>

<blockquote>
  <p>拓展，有些数组方法不会对原数组造成影响的原因，就是因为在内部对数组进行了一次深拷贝处理。</p>
</blockquote>

<h3 id="211-underscorejs-的实现">2.1.1. Underscore.js 的实现</h3>

<p>Underscore.js 库有一个 <code class="language-plaintext highlighter-rouge">snapshot</code> 是进行对象的深拷贝处理。代码的实现如下(自己有重构)。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">deepClone</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="c1">//If obj is primary types</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">!=</span> <span class="dl">"</span><span class="s2">object</span><span class="dl">"</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">//If obj is an object</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">)){</span> <span class="c1">//Make sure key is not from of Prototype</span>
      <span class="nx">temp</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">deepClone</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>  <span class="c1">//Recursion</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>但还是有点问题，如果传入的是一个 Array 类型、Date 类型和 RegExp 类型会将它们转换为简单对象(虽然它们也是对象，如数组只是属性从 0 开始逐个递增的对象而已)，但我们还是不太想这样。这种情况下，我们可以对 Array 类型和 Date 类型进行一次判定。</p>

<blockquote>
  <p>需要额外注意的是，如果是嵌套 Array 类型，也要进行递归。</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">deepClone</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="c1">//If obj is primary types</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">!=</span> <span class="dl">"</span><span class="s2">object</span><span class="dl">"</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">//If obj is Date type</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="nx">temp</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">getTime</span><span class="p">());</span>
    <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">//If obj is Array type</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span>
    <span class="nx">temp</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">obj</span><span class="p">){</span>
      <span class="nx">temp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">deepClone</span><span class="p">(</span><span class="nx">item</span><span class="p">));</span> <span class="c1">//Considering nested array</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">//Otherwise</span>
  <span class="nx">temp</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">)){</span> <span class="c1">//Make sure key is not from of Prototype</span>
      <span class="nx">temp</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">deepClone</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>  <span class="c1">//Recursion</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>即便如此，上述代码对于对象方法还是无能为力</p>
</blockquote>

<h3 id="212-利用-json-的解析和序列化">2.1.2. 利用 JSON 的解析和序列化</h3>

<p>JSON 对象有两个方法: <code class="language-plaintext highlighter-rouge">stringify()</code> 和 <code class="language-plaintext highlighter-rouge">parse()</code>。stringfy() 用于将 JavaScript 对象序列化为 JSON 字符串，而 parse() 用于将 JSON 字符串解析为原生 JavaScript 字符串。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cloneObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</code></pre></div></div>

<p>但是它也有缺点，会忽略掉值为 undefined 以及函数表达式。</p>

<h3 id="第三方库的实现">第三方库的实现</h3>

<p>Underscore – <code class="language-plaintext highlighter-rouge">_.clone()</code>
jQuery – <code class="language-plaintext highlighter-rouge">&amp;.extend()</code> 调用 <code class="language-plaintext highlighter-rouge">$.extend(true, {}, obj);</code>就可以进行深复制
lodash – <code class="language-plaintext highlighter-rouge">_.clone()</code> 和 <code class="language-plaintext highlighter-rouge">_.cloneDeep()</code>，这个库效果要更好。</p>

<p>参考:</p>
<ul>
  <li><a href="https://segmentfault.com/a/1190000002801042">深入剖析 JavaScript 的深复制</a></li>
  <li><a href="https://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript">How to Deep clone in javascript</a></li>
</ul>

<h1 id="2-date-对象相关的操作">2. Date 对象相关的操作</h1>

<h2 id="21-某个日期的前后多少日">2.1. 某个日期的前/后多少日</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getNdaysDate</span><span class="p">(</span><span class="nx">days</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="nx">date</span><span class="p">.</span><span class="nx">setDate</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getDate</span><span class="p">()</span> <span class="o">+</span> <span class="nx">days</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">date</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

:ET